
% Parameters for the original signal
fs = 1000;             
t = 0:1/fs:1;          
x = sin(2*pi*50*t);    

% Plot the original signal
figure;
subplot(3,2,1);
plot(t, x);
title('Original Signal');
xlabel('Time (s)');
ylabel('Amplitude');

% Decimation

M = 4;                 
y_decimated = decimate(x, M);  

% Plot the decimated signal
t_decimated = t(1:M:end);      
subplot(3,2,2);
plot(t_decimated, y_decimated);
title(['Decimated Signal (Factor = ', num2str(M), ')']);
xlabel('Time (s)');
ylabel('Amplitude');

% Interpolation

L = 4;                 
y_interpolated = interp(x, L); 

t_interpolated = linspace(0, 1, length(y_interpolated)); % New time vector for interpolated signal
subplot(3,2,3);
plot(t_interpolated, y_interpolated);
title(['Interpolated Signal (Factor = ', num2str(L), ')']);
xlabel('Time (s)');
ylabel('Amplitude');

% Sampling

fs_continuous = 5000;              
t_continuous = 0:1/fs_continuous:1;
x_continuous = sin(2*pi*50*t_continuous); 

fs_sampled = 200;                  
T_sampled = 1/fs_sampled;
t_sampled = 0:T_sampled:1;         
x_sampled = sin(2*pi*50*t_sampled); 

% Plot the continuous-like and sampled signals
subplot(3,2,4);
plot(t_continuous, x_continuous);
title('Continuous-like Signal');
xlabel('Time (s)');
ylabel('Amplitude');

subplot(3,2,5);
stem(t_sampled, x_sampled, 'filled');  % Use stem to show discrete samples
title(['Sampled Signal at ', num2str(fs_sampled), ' Hz']);
xlabel('Time (s)');
ylabel('Amplitude');

Decimation
Purpose: Decimation reduces the sampling rate of a signal by a factor, often denoted as 
ùëÄ
M. This process is also known as downsampling.
Process: Decimation consists of two main steps:
Low-pass filtering: First, a low-pass filter is applied to the signal to prevent aliasing. This filter removes high-frequency content that could cause overlapping in the frequency spectrum when downsampled.
Downsampling: After filtering, every 
ùëÄ
M-th sample is kept, and the rest are discarded.
Effect: Decimation reduces the data rate and bandwidth of the signal, effectively compressing it.
Applications: Decimation is widely used in applications like audio processing, telecommunications, and reducing data storage in systems that don‚Äôt require high sample rates.
2. Interpolation
Purpose: Interpolation increases the sampling rate of a signal by an integer factor, denoted as 
ùêø
L, also called upsampling.
Process: Interpolation consists of two main steps:
Upsampling: The signal is upsampled by inserting 
ùêø
‚àí
1
L‚àí1 zeros between each sample, increasing the sampling rate.
Low-pass filtering: A low-pass filter is applied to smooth the upsampled signal and reconstruct the intermediate values, eliminating any high-frequency artifacts caused by zero-insertion.
Effect: Interpolation increases the data rate, effectively recreating a higher sample rate signal.
Applications: Interpolation is essential in digital audio and video processing, telecommunications, and scenarios where a higher sample rate is needed after a signal is digitized at a lower rate.
Summary
Decimation reduces the sampling rate by filtering and downsampling, while interpolation increases it by upsampling and filtering.
Both are critical in multirate signal processing systems, where signals must be adjusted to optimal sample rates for efficient transmission, processing, or storage.
